import { readdirSync, lstatSync } from 'fs';
import { join } from 'path';

const directoriesToIgnore = ['.vitepress', 'assets', 'public', '__tests__', '__mocks__'];

/**
 * Convert the given input text such that the snake-case words are converted to
 * space separated Title Cased words and index is replaced by Introduction.
 *
 * @param input string
 * @return string
 */
function formatDisplayText(input) {
  if (input.includes('FAQ')) {
    input = `ðŸ¤” ${input}`;
  }

  if (input.toLowerCase() === 'index') {
    input = 'Introduction';
  }

  return input
    .trim()
    .split('-')
    .map(word => word.trim().charAt(0).toUpperCase() + word.substring(1))
    .reduce((acc, word) => `${acc} ${word}`.trim(), '')
    .split('.')[0];
}

/**
 * Convert absolute paths to relative paths inside the <root>/docs directory
 *
 * @param path the file path
 * @return {string} the relative path inside the docs directory
 */
function relativePath(path) {
  return path.substring(path.indexOf('docs/') + 4);
}

/**
 *
 * Walk the root directory and create a deep tree of directories and files
 *
 * @param root The root path
 * @param ignores Any files/directories to ignore
 * @return {{files: {link: string, text: string}[], directories: T[]}}
 */
function deepDirTree(root, ignores = []) {
  const contents = readdirSync(root).filter(name => !ignores.includes(name));

  const directories = contents.filter(d => lstatSync(join(root, d)).isDirectory());
  const files = contents
    .filter(f => !directories.includes(f))
    .map(f => ({
      text: formatDisplayText(f.substring(0, f.lastIndexOf('.'))),
      link: relativePath(join(root, f)),
    }));

  directories.forEach((directory, index) => {
    const children = deepDirTree(join(root, directory));

    directories[index] = [directories[index], children];
  });

  return { files, directories };
}

/**
 * Generate the top navigation bar
 * All files in the root and the top level directories become a part of the top navbar
 *
 * @param root The root path
 * @param files The top level files
 * @param directories The directory parts generated by deepDirTree()
 * @return {*[]}
 */
function generateNav(root, files, directories) {
  const nav = [];

  files.filter(item => item.text !== 'Introduction').forEach(item => nav.push(item));
  directories.forEach(([dir]) =>
    nav.push({
      text: formatDisplayText(dir),
      link: relativePath(`${root}/${dir}/`),
    }),
  );

  return nav;
}

/**
 * Generate the sidebar for the items in the top level directory
 *
 * @param root The root path
 * @param directories The directory parts generated by deepDirTree()
 * @return {{}}
 */
function generateSidebar(root, directories) {
  const sidebar = {};

  directories.forEach(moduleDir => {
    const [moduleName, { files, directories }] = moduleDir;
    const modulePath = join(root, moduleName);

    const sidebarItems = directories.map(item => ({
      collapsible: true,
      text: formatDisplayText(item[0]),
      items: item[1].files,
    }));

    sidebarItems.unshift({ collapsible: true, items: files });

    // Reorder the items so that Introduction is on the top of the line
    sidebarItems.forEach(({ items }) => {
      const introIndex = items.findIndex(item => item.text === 'Introduction');

      if (introIndex > -1) {
        const intro = items.splice(introIndex, 1);
        items.unshift(intro[0]);
      }
    });

    sidebar[relativePath(modulePath)] = sidebarItems;
  });

  return sidebar;
}

/**
 * Generate the top level navigation and sidebars
 *
 * @param root The root path
 * @return {{nav: *[], sidebar: {}}}
 */
export default function generateNavigation(root) {
  const { files, directories } = deepDirTree(root, directoriesToIgnore);

  const nav = generateNav(root, files, directories);
  const sidebar = generateSidebar(root, directories);

  return { nav, sidebar };
}
