import{_ as t,c as e,o as s,a}from"./app.cc5dde61.js";const C=JSON.parse('{"title":"Utilities","description":"","frontmatter":{},"headers":[{"level":2,"title":"debug()","slug":"debug","link":"#debug","children":[]},{"level":2,"title":"toSnakeCase()","slug":"tosnakecase","link":"#tosnakecase","children":[]},{"level":2,"title":"toCamelCase()","slug":"tocamelcase","link":"#tocamelcase","children":[]},{"level":2,"title":"toTitleCase() / toPascalCase()","slug":"totitlecase-topascalcase","link":"#totitlecase-topascalcase","children":[]},{"level":2,"title":"toKebabCase()","slug":"tokebabcase","link":"#tokebabcase","children":[]},{"level":2,"title":"hasValue()","slug":"hasvalue","link":"#hasvalue","children":[]},{"level":2,"title":"serialize()","slug":"serialize","link":"#serialize","children":[]},{"level":2,"title":"deserialize()","slug":"deserialize","link":"#deserialize","children":[]}],"relativePath":"utils/index.md"}'),l={name:"utils/index.md"},n=a(`<h1 id="utilities" tabindex="-1">Utilities <a class="header-anchor" href="#utilities" aria-hidden="true">#</a></h1><nav class="table-of-contents"><ul><li><a href="#debug">debug()</a></li><li><a href="#tosnakecase">toSnakeCase()</a></li><li><a href="#tocamelcase">toCamelCase()</a></li><li><a href="#totitlecase-topascalcase">toTitleCase() / toPascalCase()</a></li><li><a href="#tokebabcase">toKebabCase()</a></li><li><a href="#hasvalue">hasValue()</a></li><li><a href="#serialize">serialize()</a></li><li><a href="#deserialize">deserialize()</a></li></ul></nav><h2 id="debug" tabindex="-1">debug() <a class="header-anchor" href="#debug" aria-hidden="true">#</a></h2><p>Can be used to turn on/off console logging for debugging purposes</p><div class="tip custom-block"><p class="custom-block-title">Enable/Disable Logging</p><p>Expose a global variable <code>__ABU_DEBUG__</code> with a truthy value to enable logs</p></div><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">debug</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">optionalParams</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="tosnakecase" tabindex="-1">toSnakeCase() <a class="header-anchor" href="#tosnakecase" aria-hidden="true">#</a></h2><p>This will convert a given string to <strong>snake_case</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toSnakeCase</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><table><thead><tr><th style="text-align:left;">Input Example</th><th style="text-align:left;">snake_case Output Example</th></tr></thead><tbody><tr><td style="text-align:left;"><code>nancyDrew</code></td><td style="text-align:left;"><code>nancy_drew</code></td></tr><tr><td style="text-align:left;"><code>NancyDrew</code></td><td style="text-align:left;"><code>nancy_drew</code></td></tr><tr><td style="text-align:left;"><code>nancy_drew</code></td><td style="text-align:left;"><code>nancy_drew</code></td></tr><tr><td style="text-align:left;"><code>Nancy Drew</code></td><td style="text-align:left;"><code>nancy_drew</code></td></tr></tbody></table><h2 id="tocamelcase" tabindex="-1">toCamelCase() <a class="header-anchor" href="#tocamelcase" aria-hidden="true">#</a></h2><p>This will convert a given string to <strong>camelCase</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toCamelCase</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><table><thead><tr><th style="text-align:left;">Input Example</th><th style="text-align:left;">camelCase Output Example</th></tr></thead><tbody><tr><td style="text-align:left;"><code>nancyDrew</code></td><td style="text-align:left;"><code>nancyDrew</code></td></tr><tr><td style="text-align:left;"><code>NancyDrew</code></td><td style="text-align:left;"><code>nancyDrew</code></td></tr><tr><td style="text-align:left;"><code>nancy_drew</code></td><td style="text-align:left;"><code>nancyDrew</code></td></tr><tr><td style="text-align:left;"><code>Nancy Drew</code></td><td style="text-align:left;"><code>nancyDrew</code></td></tr></tbody></table><h2 id="totitlecase-topascalcase" tabindex="-1">toTitleCase() / toPascalCase() <a class="header-anchor" href="#totitlecase-topascalcase" aria-hidden="true">#</a></h2><p>This will convert a given string to <strong>TitleCase</strong> or <strong>PascalCase</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toTitleCase</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toPascalCase</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><table><thead><tr><th style="text-align:left;">Input Example</th><th style="text-align:left;">TitleCase/PascalCase Output Example</th></tr></thead><tbody><tr><td style="text-align:left;"><code>nancyDrew</code></td><td style="text-align:left;"><code>NancyDrew</code></td></tr><tr><td style="text-align:left;"><code>NancyDrew</code></td><td style="text-align:left;"><code>NancyDrew</code></td></tr><tr><td style="text-align:left;"><code>nancy_drew</code></td><td style="text-align:left;"><code>NancyDrew</code></td></tr><tr><td style="text-align:left;"><code>Nancy Drew</code></td><td style="text-align:left;"><code>NancyDrew</code></td></tr></tbody></table><h2 id="tokebabcase" tabindex="-1">toKebabCase() <a class="header-anchor" href="#tokebabcase" aria-hidden="true">#</a></h2><p>This will convert a given string to <strong>kebab-case</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toKebabCase</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><table><thead><tr><th style="text-align:left;">Input Example</th><th style="text-align:left;">kebab-case Output Example</th></tr></thead><tbody><tr><td style="text-align:left;"><code>nancyDrew</code></td><td style="text-align:left;"><code>nancy-drew</code></td></tr><tr><td style="text-align:left;"><code>NancyDrew</code></td><td style="text-align:left;"><code>nancy-drew</code></td></tr><tr><td style="text-align:left;"><code>nancy_drew</code></td><td style="text-align:left;"><code>nancy-drew</code></td></tr><tr><td style="text-align:left;"><code>Nancy Drew</code></td><td style="text-align:left;"><code>nancy-drew</code></td></tr></tbody></table><h2 id="hasvalue" tabindex="-1">hasValue() <a class="header-anchor" href="#hasvalue" aria-hidden="true">#</a></h2><p>This checks for null, undefined and empty string... return false for any of these</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hasValue</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="serialize" tabindex="-1">serialize() <a class="header-anchor" href="#serialize" aria-hidden="true">#</a></h2><p>This helper function can be used to serialize any data to string type. It will try its best to identify the datatype and produce the appropriate string serialization.</p><p>For generic objects, it will try to convert it to a JSON string.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">serialize</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><table><thead><tr><th style="text-align:center;">Data Type</th><th style="text-align:left;">Input Example</th><th style="text-align:left;">Serialized Output Example</th></tr></thead><tbody><tr><td style="text-align:center;">undefined</td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;"><code>&quot;undefined&quot;</code></td></tr><tr><td style="text-align:center;">null</td><td style="text-align:left;"><code>null</code></td><td style="text-align:left;"><code>&quot;null&quot;</code></td></tr><tr><td style="text-align:center;">string</td><td style="text-align:left;"><code>&quot;Hello World&quot;</code></td><td style="text-align:left;"><code>&quot;Hello World&quot;</code></td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:left;"><code>true</code></td><td style="text-align:left;"><code>&quot;true&quot;</code></td></tr><tr><td style="text-align:center;">number</td><td style="text-align:left;"><code>123</code></td><td style="text-align:left;"><code>&quot;123&quot;</code></td></tr><tr><td style="text-align:center;">bigint</td><td style="text-align:left;"><code>123n</code></td><td style="text-align:left;"><code>&quot;123&quot;</code></td></tr><tr><td style="text-align:center;">symbol</td><td style="text-align:left;"><code>Symbol.for(&#39;ABC&#39;)</code></td><td style="text-align:left;"><code>&quot;Symbol(ABC)&quot;</code></td></tr><tr><td style="text-align:center;">date (object)</td><td style="text-align:left;"><code>Date(&quot;2022-10-30T13:37:25.086Z&quot;)</code></td><td style="text-align:left;"><code>&quot;\\&quot;2022-10-30T13:37:25.086Z\\&quot;&quot;</code></td></tr><tr><td style="text-align:center;">object</td><td style="text-align:left;"><code>{ a: 10 }</code></td><td style="text-align:left;"><code>&quot;{\\&quot;a\\&quot;:10}&quot;</code></td></tr></tbody></table><h2 id="deserialize" tabindex="-1">deserialize() <a class="header-anchor" href="#deserialize" aria-hidden="true">#</a></h2><p>This helper function can be used to deserialize any string to an appropriate type. It will try its best to identify the datatype and produce the appropriate deserialization for it.</p><p>For , it will try to convert it to a JSON string.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">deserialize</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The order of deserialization is as follows</p><table><thead><tr><th style="text-align:center;">Data Type</th><th style="text-align:left;">Input Example</th><th style="text-align:left;">Deserialized Output Example</th></tr></thead><tbody><tr><td style="text-align:center;">undefined</td><td style="text-align:left;"><code>&quot;undefined&quot;</code></td><td style="text-align:left;"><code>undefined</code></td></tr><tr><td style="text-align:center;">null</td><td style="text-align:left;"><code>&quot;null&quot;</code></td><td style="text-align:left;"><code>null</code></td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:left;"><code>&quot;true&quot;</code></td><td style="text-align:left;"><code>true</code></td></tr><tr><td style="text-align:center;">number</td><td style="text-align:left;"><code>&quot;123&quot;</code></td><td style="text-align:left;"><code>123</code></td></tr><tr><td style="text-align:center;">bigint</td><td style="text-align:left;"><code>&quot;7809986417725377199277&quot;</code></td><td style="text-align:left;"><code>7809986417725377199277n</code></td></tr><tr><td style="text-align:center;">symbol</td><td style="text-align:left;"><code>&quot;Symbol(ABC)&quot;</code></td><td style="text-align:left;"><code>Symbol.for(&#39;ABC&#39;)</code></td></tr><tr><td style="text-align:center;">object</td><td style="text-align:left;"><code>&quot;{\\&quot;a\\&quot;:10}&quot;</code></td><td style="text-align:left;"><code>{ a: 10 }</code></td></tr><tr><td style="text-align:center;">string</td><td style="text-align:left;"><code>&quot;Hello World&quot;</code></td><td style="text-align:left;"><code>Hello World</code></td></tr><tr><td style="text-align:center;">date (object)</td><td style="text-align:left;"><code>&quot;\\&quot;2022-10-30T13:37:25.086Z\\&quot;&quot;</code></td><td style="text-align:left;"><code>Date(&quot;2022-10-30T13:37:25.086Z&quot;)</code></td></tr><tr><td style="text-align:center;">date (string)</td><td style="text-align:left;"><code>&quot;2022-10-30T13:38:33.980Z&quot;</code></td><td style="text-align:left;"><code>&quot;2022-10-30T13:38:33.980Z&quot;</code></td></tr></tbody></table>`,36),o=[n];function c(d,r,p,i,y,u){return s(),e("div",null,o)}const D=t(l,[["render",c]]);export{C as __pageData,D as default};
