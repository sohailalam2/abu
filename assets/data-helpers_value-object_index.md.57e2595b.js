import{_ as e,c as t,o as a,a as s}from"./app.57a3b10d.js";const b=JSON.parse('{"title":"Value Objects","description":"","frontmatter":{},"headers":[],"relativePath":"data-helpers/value-object/index.md"}'),n={name:"data-helpers/value-object/index.md"},l=s(`<h1 id="value-objects" tabindex="-1">Value Objects <a class="header-anchor" href="#value-objects" aria-hidden="true">#</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p>As <a href="https://en.wikipedia.org/wiki/Value_object" target="_blank" rel="noreferrer">Wikipedia</a> puts it</p><blockquote><p>In computer science, a value object is a small object that represents a simple entity whose equality is not based on identity: i.e. two value objects are equal when they have the same value, not necessarily being the same object.</p></blockquote><br><p>There are two main characteristics for value objects:</p><ul><li>They have no identity</li><li>They are immutable</li></ul><p>Martin Fowler explains <a href="https://martinfowler.com/bliki/ValueObject.html" target="_blank" rel="noreferrer">ValueObject</a> in perhaps one of the easiest to understand language with examples. It&#39;s a must-read!!</p><p>The abstract class <code>ValueObject</code> helps us create these immutable objects in a much simplified manner</p><h2 id="class-signature" tabindex="-1">Class Signature <a class="header-anchor" href="#class-signature" aria-hidden="true">#</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#569CD6;">abstract</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObjectType</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;">&gt; </span><span style="color:#569CD6;">implements</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Serializable</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">//</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#DA5221;">abstract</span><span style="color:#002339;"> </span><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ValueObject</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">T</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ValueObjectType</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;">&gt; </span><span style="color:#DA5221;">implements</span><span style="color:#002339;"> </span><span style="color:#B02767;">Serializable</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;">//</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="info custom-block"><p class="custom-block-title">ValueObjectType</p><p>Refer <a href="src/utils/types.ts">types</a> for more information</p></div><h2 id="default-validations" tabindex="-1">Default validations <a class="header-anchor" href="#default-validations" aria-hidden="true">#</a></h2><p>These are the default validations in place but can be overridden</p><table><thead><tr><th style="text-align:center;">Value Type</th><th style="text-align:center;">Validation Check</th><th style="text-align:left;">Exception Thrown</th></tr></thead><tbody><tr><td style="text-align:center;">any</td><td style="text-align:center;">is null</td><td style="text-align:left;"><code>ValueObjectCanNotBeNullException</code></td></tr><tr><td style="text-align:center;">any</td><td style="text-align:center;">is undefined</td><td style="text-align:left;"><code>ValueObjectCanNotBeNullException</code></td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;">is empty</td><td style="text-align:left;"><code>ValueObjectCanNotBeEmptyException</code></td></tr><tr><td style="text-align:center;">number</td><td style="text-align:center;">is NaN</td><td style="text-align:left;"><code>ValueObjectIsNotANumberException</code></td></tr><tr><td style="text-align:center;">number</td><td style="text-align:center;">is infinite</td><td style="text-align:left;"><code>ValueObjectIsInfiniteException</code></td></tr></tbody></table>`,15),o=[l];function r(c,p,i,d,y,u){return a(),t("div",null,o)}const E=e(n,[["render",r]]);export{b as __pageData,E as default};
