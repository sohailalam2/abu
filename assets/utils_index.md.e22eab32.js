import{_ as l,c as n,o as t,a as s,b as e}from"./app.3e625c88.js";const h=JSON.parse('{"title":"Utilities","description":"","frontmatter":{},"headers":[{"level":2,"title":"Helper Functions","slug":"helper-functions","link":"#helper-functions","children":[{"level":3,"title":"debug","slug":"debug","link":"#debug","children":[]},{"level":3,"title":"kebab-case","slug":"kebab-case","link":"#kebab-case","children":[]},{"level":3,"title":"hasValue","slug":"hasvalue","link":"#hasvalue","children":[]},{"level":3,"title":"serialize","slug":"serialize","link":"#serialize","children":[]},{"level":3,"title":"deserialize","slug":"deserialize","link":"#deserialize","children":[]}]}],"relativePath":"utils/index.md"}'),a={name:"utils/index.md"},p=s(`<h1 id="utilities" tabindex="-1">Utilities <a class="header-anchor" href="#utilities" aria-hidden="true">#</a></h1><h2 id="helper-functions" tabindex="-1">Helper Functions <a class="header-anchor" href="#helper-functions" aria-hidden="true">#</a></h2><p>These are some useful functions</p><h3 id="debug" tabindex="-1">debug <a class="header-anchor" href="#debug" aria-hidden="true">#</a></h3><p>This will print console logs in non-production environments</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">debug</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">optionalParams</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="kebab-case" tabindex="-1">kebab-case <a class="header-anchor" href="#kebab-case" aria-hidden="true">#</a></h3><p>This will convert a given string to kebab-case</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toKebabCase</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="hasvalue" tabindex="-1">hasValue <a class="header-anchor" href="#hasvalue" aria-hidden="true">#</a></h3><p>This checks for null, undefined and empty string... return false for any of these</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hasValue</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="serialize" tabindex="-1">serialize <a class="header-anchor" href="#serialize" aria-hidden="true">#</a></h3><p>This helper function can be used to serialize any data to string type. It will try its best to identify the datatype and produce the appropriate string serialization.</p><p>For generic objects, it will try to convert it to a JSON string.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">serialize</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,16),o=e("table",null,[e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"Data Type"),e("th",{style:{"text-align":"left"}},"Input Example"),e("th",{style:{"text-align":"left"}},"Serialized Output Example")])]),e("tbody",null,[e("tr",null,[e("td",{style:{"text-align":"center"}},"undefined"),e("td",{style:{"text-align":"left"}},"undefined"),e("td",{style:{"text-align":"left"}},'"undefined"')]),e("tr",null,[e("td",{style:{"text-align":"center"}},"null"),e("td",{style:{"text-align":"left"}},"null"),e("td",{style:{"text-align":"left"}},'"null"')]),e("tr",null,[e("td",{style:{"text-align":"center"}},"string"),e("td",{style:{"text-align":"left"}},'"Hello World"'),e("td",{style:{"text-align":"left"}},'"Hello World"')]),e("tr",null,[e("td",{style:{"text-align":"center"}},"boolean"),e("td",{style:{"text-align":"left"}},"true"),e("td",{style:{"text-align":"left"}},'"true"')]),e("tr",null,[e("td",{style:{"text-align":"center"}},"number"),e("td",{style:{"text-align":"left"}},"123"),e("td",{style:{"text-align":"left"}},'"123"')]),e("tr",null,[e("td",{style:{"text-align":"center"}},"bigint"),e("td",{style:{"text-align":"left"}},"123n"),e("td",{style:{"text-align":"left"}},'"123"')]),e("tr",null,[e("td",{style:{"text-align":"center"}},"symbol"),e("td",{style:{"text-align":"left"}},"Symbol.for('ABC')"),e("td",{style:{"text-align":"left"}},'"Symbol(ABC)"')]),e("tr",null,[e("td",{style:{"text-align":"center"}},"object"),e("td",{style:{"text-align":"left"},"a:":"",10:""}),e("td",{style:{"text-align":"left"}},'"{"a":10}"')])])],-1),r=s(`<h3 id="deserialize" tabindex="-1">deserialize <a class="header-anchor" href="#deserialize" aria-hidden="true">#</a></h3><p>This helper function can be used to deserialize any string to an appropriate type. It will try its best to identify the datatype and produce the appropriate deserialization for it.</p><p>For , it will try to convert it to a JSON string.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">deserialize</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The order of deserialization is as follows</p>`,5),i=e("table",null,[e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"Data Type"),e("th",{style:{"text-align":"left"}},"Input Example"),e("th",{style:{"text-align":"left"}},"Deserialized Output Example")])]),e("tbody",null,[e("tr",null,[e("td",{style:{"text-align":"center"}},"undefined"),e("td",{style:{"text-align":"left"}},'"undefined"'),e("td",{style:{"text-align":"left"}},"undefined")]),e("tr",null,[e("td",{style:{"text-align":"center"}},"null"),e("td",{style:{"text-align":"left"}},'"null"'),e("td",{style:{"text-align":"left"}},"null")]),e("tr",null,[e("td",{style:{"text-align":"center"}},"boolean"),e("td",{style:{"text-align":"left"}},'"true"'),e("td",{style:{"text-align":"left"}},"true")]),e("tr",null,[e("td",{style:{"text-align":"center"}},"number"),e("td",{style:{"text-align":"left"}},'"123"'),e("td",{style:{"text-align":"left"}},"123")]),e("tr",null,[e("td",{style:{"text-align":"center"}},"bigint"),e("td",{style:{"text-align":"left"}},'"7809986417725377199277"'),e("td",{style:{"text-align":"left"}},"7809986417725377199277n")]),e("tr",null,[e("td",{style:{"text-align":"center"}},"symbol"),e("td",{style:{"text-align":"left"}},'"Symbol(ABC)"'),e("td",{style:{"text-align":"left"}},"=== Symbol.for('ABC')")]),e("tr",{"a:":"",10:""},[e("td",{style:{"text-align":"center"}},"object"),e("td",{style:{"text-align":"left"}},'"{"a":10}"'),e("td",{style:{"text-align":"left"}})]),e("tr",null,[e("td",{style:{"text-align":"center"}},"string"),e("td",{style:{"text-align":"left"}},'"Hello World"'),e("td",{style:{"text-align":"left"}},'"Hello World"')])])],-1),c=[p,o,r,i];function d(y,u,F,b,D,g){return t(),n("div",null,c)}const A=l(a,[["render",d]]);export{h as __pageData,A as default};
