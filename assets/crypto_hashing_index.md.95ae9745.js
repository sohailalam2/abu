import{_ as s,c as n,o as a,a as o}from"./app.57a3b10d.js";const u=JSON.parse('{"title":"HashFunction","description":"","frontmatter":{},"headers":[],"relativePath":"crypto/hashing/index.md"}'),p={name:"crypto/hashing/index.md"},e=o(`<h1 id="hashfunction" tabindex="-1">HashFunction <a class="header-anchor" href="#hashfunction" aria-hidden="true">#</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p>This interface provides a consistent way of hashing an input data and produce an output hash value.</p><p>Optionally the <code>HashFunction#hash()</code> method can take a <code>config</code> argument</p><h2 id="interface-signature" tabindex="-1">Interface Signature <a class="header-anchor" href="#interface-signature" aria-hidden="true">#</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">interface</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">HashFunction</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">Input</span><span style="color:#E6E6E6;">, </span><span style="color:#4EC9B0;">Output</span><span style="color:#E6E6E6;">&gt; {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#DCDCAA;">hash</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Input</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">config</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">HashFunctionConfig</span><span style="color:#E6E6E6;">)</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Output</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">interface</span><span style="color:#002339;"> </span><span style="color:#0444AC;">HashFunction</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">Input</span><span style="color:#002339;">, </span><span style="color:#0444AC;">Output</span><span style="color:#002339;">&gt; {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#7EB233;">hash</span><span style="color:#002339;">(</span><span style="color:#B1108E;">payload</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">Input</span><span style="color:#002339;">, </span><span style="color:#B1108E;">config</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">HashFunctionConfig</span><span style="color:#002339;">)</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">Output</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,6),l=[e];function t(c,r,i,y,d,E){return a(),n("div",null,l)}const C=s(p,[["render",t]]);export{u as __pageData,C as default};
