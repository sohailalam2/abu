import{_ as s,c as n,o as a,a as l}from"./app.57a3b10d.js";const C=JSON.parse('{"title":"Create Value Objects","description":"","frontmatter":{},"headers":[],"relativePath":"data-helpers/value-object/create-value-object.md"}'),p={name:"data-helpers/value-object/create-value-object.md"},e=l(`<h1 id="create-value-objects" tabindex="-1">Create Value Objects <a class="header-anchor" href="#create-value-objects" aria-hidden="true">#</a></h1><h2 id="encapsulate-a-string" tabindex="-1">Encapsulate a string <a class="header-anchor" href="#encapsulate-a-string" aria-hidden="true">#</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#6A9955;">// here BlogTitle will encapsulate a string value</span></span>
<span class="line"><span style="color:#6A9955;">// note that there is no need to let the complier know that its a string</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">BlogTitle</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">title</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">BlogTitle</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">&#39;This is a blog about amazing value objects&#39;</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#357B42;">// here BlogTitle will encapsulate a string value</span></span>
<span class="line"><span style="color:#357B42;">// note that there is no need to let the complier know that its a string</span></span>
<span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">BlogTitle</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ValueObject</span><span style="color:#002339;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">title</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">BlogTitle</span><span style="color:#002339;">.</span><span style="color:#7EB233;">from</span><span style="color:#002339;">(</span><span style="color:#A44185;">&#39;This is a blog about amazing value objects&#39;</span><span style="color:#002339;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="encapsulate-a-primitive" tabindex="-1">Encapsulate a primitive <a class="header-anchor" href="#encapsulate-a-primitive" aria-hidden="true">#</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#6A9955;">// here BlogLikeCount will encapsulate a number value</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">BlogLikeCount</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">number</span><span style="color:#E6E6E6;">&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">likes</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">BlogLikeCount</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#E6E6E6;">(</span><span style="color:#B5CEA8;">10</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#357B42;">// here BlogLikeCount will encapsulate a number value</span></span>
<span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">BlogLikeCount</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ValueObject</span><span style="color:#002339;">&lt;</span><span style="color:#DC3EB7;">number</span><span style="color:#002339;">&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">likes</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">BlogLikeCount</span><span style="color:#002339;">.</span><span style="color:#7EB233;">from</span><span style="color:#002339;">(</span><span style="color:#174781;">10</span><span style="color:#002339;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="add-custom-validation" tabindex="-1">Add custom validation <a class="header-anchor" href="#add-custom-validation" aria-hidden="true">#</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">BlogUrl</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#DCDCAA;">validate</span><span style="color:#E6E6E6;">() {</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#569CD6;">super</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">validate</span><span style="color:#E6E6E6;">();</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#C586C0;">if</span><span style="color:#E6E6E6;"> (</span><span style="color:#D4D4D4;">!</span><span style="color:#569CD6;">this</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">includes</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">&#39;/&#39;</span><span style="color:#E6E6E6;">)) {</span></span>
<span class="line"><span style="color:#E6E6E6;">      </span><span style="color:#6A9955;">// NOTE: this is just an example and not an ideal way to check for URLs</span></span>
<span class="line"><span style="color:#E6E6E6;">      </span><span style="color:#C586C0;">throw</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">new</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">ValueObjectCanNotBeNullException</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">&#39;Incorrect URL format&#39;</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">    }</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">blogUrl</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">new</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">BlogUrl</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">&#39;/&#39;</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">BlogUrl</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ValueObject</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#7EB233;">validate</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">super</span><span style="color:#002339;">.</span><span style="color:#7EB233;">validate</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">value</span><span style="color:#002339;">.</span><span style="color:#7EB233;">includes</span><span style="color:#002339;">(</span><span style="color:#A44185;">&#39;/&#39;</span><span style="color:#002339;">)) {</span></span>
<span class="line"><span style="color:#002339;">      </span><span style="color:#357B42;">// NOTE: this is just an example and not an ideal way to check for URLs</span></span>
<span class="line"><span style="color:#002339;">      </span><span style="color:#7B30D0;">throw</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">ValueObjectCanNotBeNullException</span><span style="color:#002339;">(</span><span style="color:#A44185;">&#39;Incorrect URL format&#39;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">  }</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">blogUrl</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">BlogUrl</span><span style="color:#002339;">(</span><span style="color:#A44185;">&#39;/&#39;</span><span style="color:#002339;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">Use Factory Methods when possible</p><p>By default it is possible to use <code>new</code> keyword to create a new object, however, it is always a good idea to keep the constructor private and use the factory method to create objects</p></div><h2 id="valueobject-from" tabindex="-1">ValueObject.from() <a class="header-anchor" href="#valueobject-from" aria-hidden="true">#</a></h2><p>The ValueObject class exposes a static factory method <code>from&lt;K&gt;(value: ValueObjectType): K</code> that can be used to instantiate a new value object instance.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">MyValueObjectWithNumber</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">number</span><span style="color:#E6E6E6;">&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">hundred</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">MyValueObjectWithNumber</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#E6E6E6;">(</span><span style="color:#B5CEA8;">100</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">MyValueObjectWithNumber</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ValueObject</span><span style="color:#002339;">&lt;</span><span style="color:#DC3EB7;">number</span><span style="color:#002339;">&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">hundred</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">MyValueObjectWithNumber</span><span style="color:#002339;">.</span><span style="color:#7EB233;">from</span><span style="color:#002339;">(</span><span style="color:#174781;">100</span><span style="color:#002339;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="valueobject-fromobject" tabindex="-1">ValueObject.fromObject() <a class="header-anchor" href="#valueobject-fromobject" aria-hidden="true">#</a></h2><p>The ValueObject class exposes another static factory method <code>fromObject&lt;K&gt;(data: unknown): K</code> that can be used to instantiate a new value object instance.</p><p>Now this is a special method that looks for a property named <code>value</code> inside the <code>data</code> object. If one exists, it will try to use that to create a value object.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">MySimpleValueObject</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">myVal</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">MySimpleValueObject</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">fromObject</span><span style="color:#E6E6E6;">({ </span><span style="color:#9CDCFE;">value:</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;This is my value&#39;</span><span style="color:#E6E6E6;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// this works fine</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">myVal</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">MySimpleValueObject</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ValueObject</span><span style="color:#002339;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">myVal</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">MySimpleValueObject</span><span style="color:#002339;">.</span><span style="color:#7EB233;">fromObject</span><span style="color:#002339;">({ value: </span><span style="color:#A44185;">&#39;This is my value&#39;</span><span style="color:#002339;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;">// this works fine</span></span>
<span class="line"><span style="color:#2F86D2;">console</span><span style="color:#002339;">.</span><span style="color:#7EB233;">log</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">myVal</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">value</span><span style="color:#002339;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>However, if the data can not be converted to a ValueObject then an <code>ObjectCanNotBeConvertedToValueObject</code> is thrown</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">MySimpleValueObject</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// throws ObjectCanNotBeConvertedToValueObject</span></span>
<span class="line"><span style="color:#DCDCAA;">expect</span><span style="color:#E6E6E6;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">MySimpleValueObject</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">fromObject</span><span style="color:#E6E6E6;">({ </span><span style="color:#9CDCFE;">invalid:</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">true</span><span style="color:#E6E6E6;"> })).</span><span style="color:#DCDCAA;">throws</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">ObjectCanNotBeConvertedToValueObject</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">MySimpleValueObject</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ValueObject</span><span style="color:#002339;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;">// throws ObjectCanNotBeConvertedToValueObject</span></span>
<span class="line"><span style="color:#7EB233;">expect</span><span style="color:#002339;">(() </span><span style="color:#0991B6;">=&gt;</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">MySimpleValueObject</span><span style="color:#002339;">.</span><span style="color:#7EB233;">fromObject</span><span style="color:#002339;">({ invalid: </span><span style="color:#174781;">true</span><span style="color:#002339;"> })).</span><span style="color:#7EB233;">throws</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">ObjectCanNotBeConvertedToValueObject</span><span style="color:#002339;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="danger custom-block"><p class="custom-block-title">\u{1F47A} USE WITH EXTRA CAUTION!</p><p>The <code>fromObject()</code> method can result in an inconsistent value object.</p><p>It is not yet smart enough to determine the value type and hence can result in a type mismatch</p></div><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">MySimpleValueObject</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;">&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// NOTE here we are passing a number but the value object expects a string</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">myValue</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">MySimpleValueObject</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">fromObject</span><span style="color:#E6E6E6;">({ </span><span style="color:#9CDCFE;">value:</span><span style="color:#E6E6E6;"> </span><span style="color:#B5CEA8;">1000</span><span style="color:#E6E6E6;"> }); </span><span style="color:#6A9955;">//\u203C\uFE0F\u2049\uFE0F</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// myVal is successfully created</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// The following test fails</span></span>
<span class="line"><span style="color:#DCDCAA;">expect</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">myValue</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">).</span><span style="color:#DCDCAA;">toEqual</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">&#39;1000&#39;</span><span style="color:#E6E6E6;">); </span><span style="color:#6A9955;">// \u274C \u{1F47A}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">MySimpleValueObject</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ValueObject</span><span style="color:#002339;">&lt;</span><span style="color:#DC3EB7;">string</span><span style="color:#002339;">&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;">// NOTE here we are passing a number but the value object expects a string</span></span>
<span class="line"><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">myValue</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">MySimpleValueObject</span><span style="color:#002339;">.</span><span style="color:#7EB233;">fromObject</span><span style="color:#002339;">({ value: </span><span style="color:#174781;">1000</span><span style="color:#002339;"> }); </span><span style="color:#357B42;">//\u203C\uFE0F\u2049\uFE0F</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;">// myVal is successfully created</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;">// The following test fails</span></span>
<span class="line"><span style="color:#7EB233;">expect</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">myValue</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">value</span><span style="color:#002339;">).</span><span style="color:#7EB233;">toEqual</span><span style="color:#002339;">(</span><span style="color:#A44185;">&#39;1000&#39;</span><span style="color:#002339;">); </span><span style="color:#357B42;">// \u274C \u{1F47A}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="complex-value-object" tabindex="-1">Complex Value Object <a class="header-anchor" href="#complex-value-object" aria-hidden="true">#</a></h2><p>ValueObjects can not only hold simple value but also complex and nested value objects.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">MySimpleValueObject</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">interface</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">NestedValueObject</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">CustomObject</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">nested</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">MySimpleValueObject</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">interface</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">DeeplyNestedValueObject</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">CustomObject</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">deep</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">NestedValueObject</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">interface</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ComplexValue</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">CustomObject</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">simpleString</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">simpleNumber</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">number</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">simpleBoolean</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">simpleObject</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;"> };</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">simpleVO</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">MySimpleValueObject</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">nestedVO</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">NestedValueObject</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">deeplyNestedVO</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">DeeplyNestedValueObject</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">MyComplexValue</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">ComplexValue</span><span style="color:#E6E6E6;">&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">myValue</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">MyComplexValue</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">ComplexValue</span><span style="color:#E6E6E6;">&gt;({</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">simpleString:</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;Hello World!&#39;</span><span style="color:#E6E6E6;">,</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">simpleNumber:</span><span style="color:#E6E6E6;"> </span><span style="color:#B5CEA8;">100</span><span style="color:#E6E6E6;">,</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">simpleBoolean:</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">true</span><span style="color:#E6E6E6;">,</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">simpleObject:</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">name:</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;Bruce Wayne&#39;</span><span style="color:#E6E6E6;"> },</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">simpleVO:</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">MySimpleValueObject</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">&#39;Hello World!&#39;</span><span style="color:#E6E6E6;">),</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">nestedVO:</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">nested:</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">MySimpleValueObject</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">&#39;Nested Value&#39;</span><span style="color:#E6E6E6;">) },</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">deeplyNestedVO:</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">deep:</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">nested:</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">MySimpleValueObject</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">&#39;Deeply Nested Value&#39;</span><span style="color:#E6E6E6;">) } },</span></span>
<span class="line"><span style="color:#E6E6E6;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">MySimpleValueObject</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ValueObject</span><span style="color:#002339;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">interface</span><span style="color:#002339;"> </span><span style="color:#0444AC;">NestedValueObject</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">CustomObject</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">nested</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">MySimpleValueObject</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">interface</span><span style="color:#002339;"> </span><span style="color:#0444AC;">DeeplyNestedValueObject</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">CustomObject</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">deep</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">NestedValueObject</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">interface</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ComplexValue</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">CustomObject</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">simpleString</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">simpleNumber</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">number</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">simpleBoolean</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">boolean</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">simpleObject</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> { </span><span style="color:#2F86D2;">name</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;"> };</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">simpleVO</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">MySimpleValueObject</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">nestedVO</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">NestedValueObject</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">deeplyNestedVO</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">DeeplyNestedValueObject</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">MyComplexValue</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ValueObject</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">ComplexValue</span><span style="color:#002339;">&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">myValue</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">MyComplexValue</span><span style="color:#002339;">.</span><span style="color:#7EB233;">from</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">ComplexValue</span><span style="color:#002339;">&gt;({</span></span>
<span class="line"><span style="color:#002339;">  simpleString: </span><span style="color:#A44185;">&#39;Hello World!&#39;</span><span style="color:#002339;">,</span></span>
<span class="line"><span style="color:#002339;">  simpleNumber: </span><span style="color:#174781;">100</span><span style="color:#002339;">,</span></span>
<span class="line"><span style="color:#002339;">  simpleBoolean: </span><span style="color:#174781;">true</span><span style="color:#002339;">,</span></span>
<span class="line"><span style="color:#002339;">  simpleObject: { name: </span><span style="color:#A44185;">&#39;Bruce Wayne&#39;</span><span style="color:#002339;"> },</span></span>
<span class="line"><span style="color:#002339;">  simpleVO: </span><span style="color:#2F86D2;">MySimpleValueObject</span><span style="color:#002339;">.</span><span style="color:#7EB233;">from</span><span style="color:#002339;">(</span><span style="color:#A44185;">&#39;Hello World!&#39;</span><span style="color:#002339;">),</span></span>
<span class="line"><span style="color:#002339;">  nestedVO: { nested: </span><span style="color:#2F86D2;">MySimpleValueObject</span><span style="color:#002339;">.</span><span style="color:#7EB233;">from</span><span style="color:#002339;">(</span><span style="color:#A44185;">&#39;Nested Value&#39;</span><span style="color:#002339;">) },</span></span>
<span class="line"><span style="color:#002339;">  deeplyNestedVO: { deep: { nested: </span><span style="color:#2F86D2;">MySimpleValueObject</span><span style="color:#002339;">.</span><span style="color:#7EB233;">from</span><span style="color:#002339;">(</span><span style="color:#A44185;">&#39;Deeply Nested Value&#39;</span><span style="color:#002339;">) } },</span></span>
<span class="line"><span style="color:#002339;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div>`,22),o=[e];function c(t,r,y,E,i,b){return a(),n("div",null,o)}const d=s(p,[["render",c]]);export{C as __pageData,d as default};
