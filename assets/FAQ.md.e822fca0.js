import{_ as s,c as e,o as n,a}from"./app.cc5dde61.js";const b=JSON.parse('{"title":"Frequently Asked Questions","description":"","frontmatter":{},"headers":[{"level":3,"title":"Failing Tests - TypeError webcrypto","slug":"failing-tests-typeerror-webcrypto","link":"#failing-tests-typeerror-webcrypto","children":[]}],"relativePath":"FAQ.md"}'),o={name:"FAQ.md"},r=a(`<h1 id="frequently-asked-questions" tabindex="-1">Frequently Asked Questions <a class="header-anchor" href="#frequently-asked-questions" aria-hidden="true">#</a></h1><nav class="table-of-contents"><ul><li><a href="#failing-tests-typeerror-webcrypto">Failing Tests - TypeError webcrypto</a></li></ul></nav><h3 id="failing-tests-typeerror-webcrypto" tabindex="-1">Failing Tests - TypeError <code>webcrypto</code> <a class="header-anchor" href="#failing-tests-typeerror-webcrypto" aria-hidden="true">#</a></h3><blockquote><p>My tests are failing because of a cryptic error message: <code>TypeError: Cannot read properties of undefined (reading &#39;webcrypto&#39;)</code></p></blockquote><p>Abu uses &#39;webcrypto&#39; implementation to generate random numbers that are then used by the <a href="./id-generators.html">id-generators</a>. Unfortunately, many test environments do not provide an implementation for the same. However, we can easily define it as follows:</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// in some spec.ts file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> crypto </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">crypto</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#A6ACCD;">(globalThis</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">crypto</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">webcrypto</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> crypto</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">webcrypto </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,6),l=[r];function p(t,c,i,y,D,d){return n(),e("div",null,l)}const u=s(o,[["render",p]]);export{b as __pageData,u as default};
