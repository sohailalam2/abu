import{_ as s,c as a,o as n,a as l}from"./app.ab06fbc4.js";const m=JSON.parse('{"title":"Exception","description":"","frontmatter":{},"headers":[],"relativePath":"data-helpers/exception.md"}'),p={name:"data-helpers/exception.md"},e=l(`<h1 id="exception" tabindex="-1">Exception <a class="header-anchor" href="#exception" aria-hidden="true">#</a></h1><p>This is an abstract class that can be used to create some quick and simple exceptions with some default message structure.</p><h3 id="class-signature" tabindex="-1">Class Signature <a class="header-anchor" href="#class-signature" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#569CD6;">abstract</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Exception</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;">&gt; </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Error</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">implements</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Serializable</span><span style="color:#E6E6E6;"> {}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#DA5221;">abstract</span><span style="color:#002339;"> </span><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">Exception</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">T</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;">&gt; </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">Error</span><span style="color:#002339;"> </span><span style="color:#DA5221;">implements</span><span style="color:#002339;"> </span><span style="color:#B02767;">Serializable</span><span style="color:#002339;"> {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#6A9955;">// a simple exception class with string data type</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObjectCanNotBeNullException</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Exception</span><span style="color:#E6E6E6;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// an exception class with a dynamic T type</span></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObjectCanNotBeEmptyException</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#E6E6E6;">&gt; </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Exception</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#E6E6E6;">&gt; {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#569CD6;">constructor</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">T</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#569CD6;">super</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#357B42;">// a simple exception class with string data type</span></span>
<span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ValueObjectCanNotBeNullException</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">Exception</span><span style="color:#002339;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;">// an exception class with a dynamic T type</span></span>
<span class="line"><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ValueObjectCanNotBeEmptyException</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">T</span><span style="color:#002339;">&gt; </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">Exception</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">T</span><span style="color:#002339;">&gt; {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#0991B6;">constructor</span><span style="color:#002339;">(</span><span style="color:#B1108E;">value</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">T</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">super</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">value</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">  }</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="message-formatting" tabindex="-1">Message Formatting <a class="header-anchor" href="#message-formatting" aria-hidden="true">#</a></h3><p>It simply takes the name of the class (in PascalCase), removes the word Exception from it and space separates the words. For example, the above class <code>ValueObjectCanNotBeEmptyException</code> will show a message <code>Value Object Can Not Be Empty</code> If a custom message value is passed then it will be appended to the class name message.</p><div class="danger custom-block"><p class="custom-block-title">Keep ClassName unmangled</p><p>The message formatting looks at the <code>constructor.name</code> and converts it into space separated words. However, this only works when the class names are preserved during the build process.</p><p>Example <code>vite.config.js</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#C586C0;">default</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">defineConfig</span><span style="color:#E6E6E6;">(({ </span><span style="color:#9CDCFE;">mode</span><span style="color:#E6E6E6;"> }) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#C586C0;">return</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#6A9955;">//...</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#9CDCFE;">build:</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">      </span><span style="color:#9CDCFE;">minify:</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;terser&#39;</span><span style="color:#E6E6E6;">,</span></span>
<span class="line"><span style="color:#E6E6E6;">      </span><span style="color:#9CDCFE;">terserOptions:</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">keep_classnames:</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">true</span><span style="color:#E6E6E6;"> },</span></span>
<span class="line"><span style="color:#E6E6E6;">    },</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#6A9955;">//...</span></span>
<span class="line"><span style="color:#E6E6E6;">  };</span></span>
<span class="line"><span style="color:#E6E6E6;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">default</span><span style="color:#002339;"> </span><span style="color:#7EB233;">defineConfig</span><span style="color:#002339;">(({ </span><span style="color:#B1108E;">mode</span><span style="color:#002339;"> }) </span><span style="color:#0991B6;">=&gt;</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;">//...</span></span>
<span class="line"><span style="color:#002339;">    build: {</span></span>
<span class="line"><span style="color:#002339;">      minify: </span><span style="color:#A44185;">&#39;terser&#39;</span><span style="color:#002339;">,</span></span>
<span class="line"><span style="color:#002339;">      terserOptions: { keep_classnames: </span><span style="color:#174781;">true</span><span style="color:#002339;"> },</span></span>
<span class="line"><span style="color:#002339;">    },</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;">//...</span></span>
<span class="line"><span style="color:#002339;">  };</span></span>
<span class="line"><span style="color:#002339;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div>`,9),o=[e];function t(c,r,i,y,E,d){return n(),a("div",null,o)}const C=s(p,[["render",t]]);export{m as __pageData,C as default};
