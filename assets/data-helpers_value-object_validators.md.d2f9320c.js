import{_ as t,c as e,o as s,a}from"./app.64fdbf73.js";const E=JSON.parse('{"title":"Validators","description":"","frontmatter":{},"headers":[],"relativePath":"data-helpers/value-object/validators.md"}'),n={name:"data-helpers/value-object/validators.md"},l=a(`<h1 id="validators" tabindex="-1">Validators <a class="header-anchor" href="#validators" aria-hidden="true">#</a></h1><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">Exception</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">StringValidator</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">ValueObject</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;@sohailalam2/abu&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">MyCustomException</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Exception</span><span style="color:#E6E6E6;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">@</span><span style="color:#9CDCFE;">StringValidator</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">matches</span><span style="color:#E6E6E6;">(</span><span style="color:#D16969;">/</span><span style="color:#DCDCAA;">^</span><span style="color:#D16969;">Hello World!</span><span style="color:#DCDCAA;">$</span><span style="color:#D16969;">/</span><span style="color:#E6E6E6;">, { </span><span style="color:#9CDCFE;">exceptionType:</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">MyCustomException</span><span style="color:#E6E6E6;"> })</span></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">MyValueObject</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;">&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">MyValueObject</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;">&gt;(</span><span style="color:#CE9178;">&#39;Hello World!&#39;</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#7B30D0;">import</span><span style="color:#002339;"> { </span><span style="color:#2F86D2;">Exception</span><span style="color:#002339;">, </span><span style="color:#2F86D2;">StringValidator</span><span style="color:#002339;">, </span><span style="color:#2F86D2;">ValueObject</span><span style="color:#002339;"> } </span><span style="color:#7B30D0;">from</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;@sohailalam2/abu&#39;</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">MyCustomException</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">Exception</span><span style="color:#002339;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">@</span><span style="color:#2F86D2;">StringValidator</span><span style="color:#002339;">.</span><span style="color:#7EB233;">matches</span><span style="color:#002339;">(</span><span style="color:#A44185;">/</span><span style="color:#7B30D0;">^</span><span style="color:#A44185;">Hello World!</span><span style="color:#7B30D0;">$</span><span style="color:#A44185;">/</span><span style="color:#002339;">, { exceptionType: </span><span style="color:#2F86D2;">MyCustomException</span><span style="color:#002339;"> })</span></span>
<span class="line"><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">MyValueObject</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ValueObject</span><span style="color:#002339;">&lt;</span><span style="color:#DC3EB7;">string</span><span style="color:#002339;">&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#2F86D2;">MyValueObject</span><span style="color:#002339;">.</span><span style="color:#7EB233;">from</span><span style="color:#002339;">&lt;</span><span style="color:#DC3EB7;">string</span><span style="color:#002339;">&gt;(</span><span style="color:#A44185;">&#39;Hello World!&#39;</span><span style="color:#002339;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="validatoroptions" tabindex="-1">ValidatorOptions <a class="header-anchor" href="#validatoroptions" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:center;">Option</th><th style="text-align:center;">Option Type</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:center;">exceptionType</td><td style="text-align:center;"><code>Class&lt;Exception&gt;</code></td><td style="text-align:left;">The given class shall be thrown upon a validation failure</td></tr></tbody></table><h2 id="boolean-validator" tabindex="-1">Boolean Validator <a class="header-anchor" href="#boolean-validator" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:left;">Decorator</th><th style="text-align:center;">Properties</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;"><code>@BooleanValidator.isBoolean(options?)</code></td><td style="text-align:center;"><code>ValidatorOptions</code></td><td style="text-align:left;">Ensures that the input is a Boolean</td></tr><tr><td style="text-align:left;"><code>@BooleanValidator.isTrue(options?)</code></td><td style="text-align:center;"><code>ValidatorOptions</code></td><td style="text-align:left;">Ensures that the input is <code>true</code></td></tr><tr><td style="text-align:left;"><code>@BooleanValidator.isFalse(options?)</code></td><td style="text-align:center;"><code>ValidatorOptions</code></td><td style="text-align:left;">Ensures that the input is <code>false</code></td></tr></tbody></table><h2 id="number-validator" tabindex="-1">Number Validator <a class="header-anchor" href="#number-validator" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:left;">Decorator</th><th style="text-align:center;">Properties</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;"><code>@NumberValidator.isNumber(options?)</code></td><td style="text-align:center;"><code>ValidatorOptions</code></td><td style="text-align:left;">Ensures that the input is a Number</td></tr><tr><td style="text-align:left;"><code>@NumberValidator.isInteger(options?)</code></td><td style="text-align:center;"><code>ValidatorOptions</code></td><td style="text-align:left;">Ensures that the input is an integer</td></tr><tr><td style="text-align:left;"><code>@NumberValidator.isPositive(options?)</code></td><td style="text-align:center;"><code>ValidatorOptions</code></td><td style="text-align:left;">Ensures that the input is a positive number</td></tr><tr><td style="text-align:left;"><code>@NumberValidator.isNegative(options?)</code></td><td style="text-align:center;"><code>ValidatorOptions</code></td><td style="text-align:left;">Ensures that the input is a negative number</td></tr><tr><td style="text-align:left;"><code>@NumberValidator.isLessThan(compare, options?)</code></td><td style="text-align:center;">(<code>number</code>, <code>ValidatorOptions</code>)</td><td style="text-align:left;">Ensures that the input is less than the given number</td></tr><tr><td style="text-align:left;"><code>@NumberValidator.isLessThanEquals(compare, options?)</code></td><td style="text-align:center;">(<code>number</code>, <code>ValidatorOptions</code>)</td><td style="text-align:left;">Ensures that the input is less than or equal to the given number</td></tr><tr><td style="text-align:left;"><code>@NumberValidator.isGreaterThan(compare, options?)</code></td><td style="text-align:center;">(<code>number</code>, <code>ValidatorOptions</code>)</td><td style="text-align:left;">Ensures that the input is greater than the given number</td></tr><tr><td style="text-align:left;"><code>@NumberValidator.isGreaterThanEquals(compare, options?)</code></td><td style="text-align:center;">(<code>number</code>, <code>ValidatorOptions</code>)</td><td style="text-align:left;">Ensures that the input is greater than or equal to the given number</td></tr><tr><td style="text-align:left;"><code>@NumberValidator.isEquals(compare, options?)</code></td><td style="text-align:center;">(<code>number</code>, <code>ValidatorOptions</code>)</td><td style="text-align:left;">Ensures that the input is equal to the given number</td></tr></tbody></table><h2 id="string-validator" tabindex="-1">String Validator <a class="header-anchor" href="#string-validator" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:left;">Decorator</th><th style="text-align:center;">Properties</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;"><code>@StringValidator.isString(options?)</code></td><td style="text-align:center;"><code>ValidatorOptions</code></td><td style="text-align:left;">Ensures that the input is a string</td></tr><tr><td style="text-align:left;"><code>@StringValidator.isEmpty(options?)</code></td><td style="text-align:center;"><code>ValidatorOptions</code></td><td style="text-align:left;">Ensures that the input is an empty string</td></tr><tr><td style="text-align:left;"><code>@StringValidator.isNotEmpty(options?)</code></td><td style="text-align:center;"><code>ValidatorOptions</code></td><td style="text-align:left;">Ensures that the input is not an empty string</td></tr><tr><td style="text-align:left;"><code>@StringValidator.isNumberAsString(options?)</code></td><td style="text-align:center;"><code>ValidatorOptions</code></td><td style="text-align:left;">Ensures that the input is a string representation of a number</td></tr><tr><td style="text-align:left;"><code>@StringValidator.isBooleanAsString(options?)</code></td><td style="text-align:center;"><code>ValidatorOptions</code></td><td style="text-align:left;">Ensures that the input is a string representation of a boolean</td></tr><tr><td style="text-align:left;"><code>@StringValidator.isDateAsString(options?)</code></td><td style="text-align:center;"><code>ValidatorOptions</code></td><td style="text-align:left;">Ensures that the input is a string representation of a date</td></tr><tr><td style="text-align:left;"><code>@StringValidator.isJSON(options?)</code></td><td style="text-align:center;"><code>ValidatorOptions</code></td><td style="text-align:left;">Ensures that the input is a string representation of a json string</td></tr><tr><td style="text-align:left;"><code>@StringValidator.matches(matches, options?)</code></td><td style="text-align:center;">(<code>RegExp</code>, <code>ValidatorOptions</code>)</td><td style="text-align:left;">Ensures that the input matches with the given regular expression</td></tr><tr><td style="text-align:left;"><code>@StringValidator.equals(matches, options?)</code></td><td style="text-align:center;">(<code>string</code>, <code>ValidatorOptions</code>)</td><td style="text-align:left;">Ensures that the input equals to the given string</td></tr><tr><td style="text-align:left;"><code>@StringValidator.contains(partial, options?)</code></td><td style="text-align:center;">(<code>string</code>, <code>ValidatorOptions</code>)</td><td style="text-align:left;">Ensures that the input contains the partial given string</td></tr><tr><td style="text-align:left;"><code>@StringValidator.startsWith(partial, options?)</code></td><td style="text-align:center;">(<code>string</code>, <code>ValidatorOptions</code>)</td><td style="text-align:left;">Ensures that the input starts with the partial given string</td></tr><tr><td style="text-align:left;"><code>@StringValidator.endsWith(partial, options?)</code></td><td style="text-align:center;">(<code>string</code>, <code>ValidatorOptions</code>)</td><td style="text-align:left;">Ensures that the input ends with the partial given string</td></tr><tr><td style="text-align:left;"><code>@StringValidator.minLength(length, options?)</code></td><td style="text-align:center;">(<code>number</code>, <code>ValidatorOptions</code>)</td><td style="text-align:left;">Ensures that the input&#39;s length is less than the given length</td></tr><tr><td style="text-align:left;"><code>@StringValidator.maxLength(length, options?)</code></td><td style="text-align:center;">(<code>number</code>, <code>ValidatorOptions</code>)</td><td style="text-align:left;">Ensures that the input&#39;s length is more than or equal to the given length</td></tr></tbody></table>`,10),o=[l];function r(i,d,p,c,y,g){return s(),e("div",null,o)}const u=t(n,[["render",r]]);export{E as __pageData,u as default};
