import{_ as t,c as e,o as s,a as l}from"./app.2fa2a0c7.js";const g=JSON.parse('{"title":"Serialization","description":"","frontmatter":{},"headers":[],"relativePath":"data-helpers/serialization.md"}'),a={name:"data-helpers/serialization.md"},n=l(`<h1 id="serialization" tabindex="-1">Serialization <a class="header-anchor" href="#serialization" aria-hidden="true">#</a></h1><h2 id="serializable-interface" tabindex="-1">Serializable Interface <a class="header-anchor" href="#serializable-interface" aria-hidden="true">#</a></h2><p>This interface exposes the following method declarations that any class can implement to provide serialization support</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Serializable</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#DCDCAA;">toJSON</span><span style="color:#E6E6E6;">()</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">object</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#DCDCAA;">toString</span><span style="color:#E6E6E6;">()</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#0991B6;">interface</span><span style="color:#002339;"> </span><span style="color:#0444AC;">Serializable</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#7EB233;">toJSON</span><span style="color:#002339;">()</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">object</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#7EB233;">toString</span><span style="color:#002339;">()</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="serialize" tabindex="-1">serialize() <a class="header-anchor" href="#serialize" aria-hidden="true">#</a></h2><p>This helper function can be used to serialize any data to string type. It will try its best to identify the datatype and produce the appropriate string serialization.</p><p>For generic objects, it will try to convert it to a JSON string.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">serialize</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#E6E6E6;">&gt;(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">T</span><span style="color:#E6E6E6;">)</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">//</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#0991B6;">function</span><span style="color:#002339;"> </span><span style="color:#7EB233;">serialize</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">T</span><span style="color:#002339;">&gt;(</span><span style="color:#B1108E;">value</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">T</span><span style="color:#002339;">)</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;">//</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><table><thead><tr><th style="text-align:center;">Data Type</th><th style="text-align:left;">Input Example</th><th style="text-align:left;">Serialized Output Example</th></tr></thead><tbody><tr><td style="text-align:center;">undefined</td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;"><code>&quot;undefined&quot;</code></td></tr><tr><td style="text-align:center;">null</td><td style="text-align:left;"><code>null</code></td><td style="text-align:left;"><code>&quot;null&quot;</code></td></tr><tr><td style="text-align:center;">string</td><td style="text-align:left;"><code>&quot;Hello World&quot;</code></td><td style="text-align:left;"><code>&quot;Hello World&quot;</code></td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:left;"><code>true</code></td><td style="text-align:left;"><code>&quot;true&quot;</code></td></tr><tr><td style="text-align:center;">number</td><td style="text-align:left;"><code>123</code></td><td style="text-align:left;"><code>&quot;123&quot;</code></td></tr><tr><td style="text-align:center;">bigint</td><td style="text-align:left;"><code>123n</code></td><td style="text-align:left;"><code>&quot;123&quot;</code></td></tr><tr><td style="text-align:center;">symbol</td><td style="text-align:left;"><code>Symbol.for(&#39;ABC&#39;)</code></td><td style="text-align:left;"><code>&quot;Symbol(ABC)&quot;</code></td></tr><tr><td style="text-align:center;">date (object)</td><td style="text-align:left;"><code>Date(&quot;2022-10-30T13:37:25.086Z&quot;)</code></td><td style="text-align:left;"><code>&quot;\\&quot;2022-10-30T13:37:25.086Z\\&quot;&quot;</code></td></tr><tr><td style="text-align:center;">object</td><td style="text-align:left;"><code>{ a: 10 }</code></td><td style="text-align:left;"><code>&quot;{\\&quot;a\\&quot;:10}&quot;</code></td></tr></tbody></table><h2 id="deserialize" tabindex="-1">deserialize() <a class="header-anchor" href="#deserialize" aria-hidden="true">#</a></h2><p>This helper function can be used to deserialize any string to an appropriate type. It will try its best to identify the datatype and produce the appropriate deserialization for it.</p><p>For , it will try to convert it to a JSON string.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">deserialize</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#E6E6E6;">&gt;(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;">)</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">T</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">//</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#0991B6;">function</span><span style="color:#002339;"> </span><span style="color:#7EB233;">deserialize</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">T</span><span style="color:#002339;">&gt;(</span><span style="color:#B1108E;">value</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;">)</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">T</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;">//</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The order of deserialization is as follows</p><table><thead><tr><th style="text-align:center;">Data Type</th><th style="text-align:left;">Input Example</th><th style="text-align:left;">Deserialized Output Example</th></tr></thead><tbody><tr><td style="text-align:center;">undefined</td><td style="text-align:left;"><code>&quot;undefined&quot;</code></td><td style="text-align:left;"><code>undefined</code></td></tr><tr><td style="text-align:center;">null</td><td style="text-align:left;"><code>&quot;null&quot;</code></td><td style="text-align:left;"><code>null</code></td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:left;"><code>&quot;true&quot;</code></td><td style="text-align:left;"><code>true</code></td></tr><tr><td style="text-align:center;">number</td><td style="text-align:left;"><code>&quot;123&quot;</code></td><td style="text-align:left;"><code>123</code></td></tr><tr><td style="text-align:center;">bigint</td><td style="text-align:left;"><code>&quot;7809986417725377199277&quot;</code></td><td style="text-align:left;"><code>7809986417725377199277n</code></td></tr><tr><td style="text-align:center;">symbol</td><td style="text-align:left;"><code>&quot;Symbol(ABC)&quot;</code></td><td style="text-align:left;"><code>Symbol.for(&#39;ABC&#39;)</code></td></tr><tr><td style="text-align:center;">object</td><td style="text-align:left;"><code>&quot;{\\&quot;a\\&quot;:10}&quot;</code></td><td style="text-align:left;"><code>{ a: 10 }</code></td></tr><tr><td style="text-align:center;">string</td><td style="text-align:left;"><code>&quot;Hello World&quot;</code></td><td style="text-align:left;"><code>Hello World</code></td></tr><tr><td style="text-align:center;">date (object)</td><td style="text-align:left;"><code>&quot;\\&quot;2022-10-30T13:37:25.086Z\\&quot;&quot;</code></td><td style="text-align:left;"><code>Date(&quot;2022-10-30T13:37:25.086Z&quot;)</code></td></tr><tr><td style="text-align:center;">date (string)</td><td style="text-align:left;"><code>&quot;2022-10-30T13:38:33.980Z&quot;</code></td><td style="text-align:left;"><code>&quot;2022-10-30T13:38:33.980Z&quot;</code></td></tr></tbody></table>`,15),o=[n];function p(r,c,d,i,y,u){return s(),e("div",null,o)}const f=t(a,[["render",p]]);export{g as __pageData,f as default};
