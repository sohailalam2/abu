import{_ as t,c as e,o as s,a as l}from"./app.474b9493.js";const g=JSON.parse('{"title":"Utilities","description":"","frontmatter":{},"headers":[{"level":2,"title":"debug()","slug":"debug","link":"#debug","children":[]},{"level":2,"title":"toKebabCase()","slug":"tokebabcase","link":"#tokebabcase","children":[]},{"level":2,"title":"hasValue()","slug":"hasvalue","link":"#hasvalue","children":[]},{"level":2,"title":"serialize()","slug":"serialize","link":"#serialize","children":[]},{"level":2,"title":"deserialize()","slug":"deserialize","link":"#deserialize","children":[]}],"relativePath":"utils/index.md"}'),a={name:"utils/index.md"},n=l(`<h1 id="utilities" tabindex="-1">Utilities <a class="header-anchor" href="#utilities" aria-hidden="true">#</a></h1><h2 id="debug" tabindex="-1">debug() <a class="header-anchor" href="#debug" aria-hidden="true">#</a></h2><p>This will print console logs in non-production environments</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">debug</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">optionalParams</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="tokebabcase" tabindex="-1">toKebabCase() <a class="header-anchor" href="#tokebabcase" aria-hidden="true">#</a></h2><p>This will convert a given string to kebab-case</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toKebabCase</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><table><thead><tr><th style="text-align:left;">Input Example</th><th style="text-align:left;">kebab-case Output Example</th></tr></thead><tbody><tr><td style="text-align:left;"><code>camelCase</code></td><td style="text-align:left;"><code>camel-case</code></td></tr><tr><td style="text-align:left;"><code>TitleCase</code></td><td style="text-align:left;"><code>title-case</code></td></tr><tr><td style="text-align:left;"><code>snake_case</code></td><td style="text-align:left;"><code>snake-case</code></td></tr><tr><td style="text-align:left;"><code>Hello World</code></td><td style="text-align:left;"><code>hello-world</code></td></tr></tbody></table><h2 id="hasvalue" tabindex="-1">hasValue() <a class="header-anchor" href="#hasvalue" aria-hidden="true">#</a></h2><p>This checks for null, undefined and empty string... return false for any of these</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hasValue</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="serialize" tabindex="-1">serialize() <a class="header-anchor" href="#serialize" aria-hidden="true">#</a></h2><p>This helper function can be used to serialize any data to string type. It will try its best to identify the datatype and produce the appropriate string serialization.</p><p>For generic objects, it will try to convert it to a JSON string.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">serialize</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><table><thead><tr><th style="text-align:center;">Data Type</th><th style="text-align:left;">Input Example</th><th style="text-align:left;">Serialized Output Example</th></tr></thead><tbody><tr><td style="text-align:center;">undefined</td><td style="text-align:left;"><code>undefined</code></td><td style="text-align:left;"><code>&quot;undefined&quot;</code></td></tr><tr><td style="text-align:center;">null</td><td style="text-align:left;"><code>null</code></td><td style="text-align:left;"><code>&quot;null&quot;</code></td></tr><tr><td style="text-align:center;">string</td><td style="text-align:left;"><code>&quot;Hello World&quot;</code></td><td style="text-align:left;"><code>&quot;Hello World&quot;</code></td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:left;"><code>true</code></td><td style="text-align:left;"><code>&quot;true&quot;</code></td></tr><tr><td style="text-align:center;">number</td><td style="text-align:left;"><code>123</code></td><td style="text-align:left;"><code>&quot;123&quot;</code></td></tr><tr><td style="text-align:center;">bigint</td><td style="text-align:left;"><code>123n</code></td><td style="text-align:left;"><code>&quot;123&quot;</code></td></tr><tr><td style="text-align:center;">symbol</td><td style="text-align:left;"><code>Symbol.for(&#39;ABC&#39;)</code></td><td style="text-align:left;"><code>&quot;Symbol(ABC)&quot;</code></td></tr><tr><td style="text-align:center;">object</td><td style="text-align:left;"><code>{ a: 10 }</code></td><td style="text-align:left;"><code>&quot;{\\&quot;a\\&quot;:10}&quot;</code></td></tr></tbody></table><h2 id="deserialize" tabindex="-1">deserialize() <a class="header-anchor" href="#deserialize" aria-hidden="true">#</a></h2><p>This helper function can be used to deserialize any string to an appropriate type. It will try its best to identify the datatype and produce the appropriate deserialization for it.</p><p>For , it will try to convert it to a JSON string.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">deserialize</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The order of deserialization is as follows</p><table><thead><tr><th style="text-align:center;">Data Type</th><th style="text-align:left;">Input Example</th><th style="text-align:left;">Deserialized Output Example</th></tr></thead><tbody><tr><td style="text-align:center;">undefined</td><td style="text-align:left;"><code>&quot;undefined&quot;</code></td><td style="text-align:left;"><code>undefined</code></td></tr><tr><td style="text-align:center;">null</td><td style="text-align:left;"><code>&quot;null&quot;</code></td><td style="text-align:left;"><code>null</code></td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:left;"><code>&quot;true&quot;</code></td><td style="text-align:left;"><code>true</code></td></tr><tr><td style="text-align:center;">number</td><td style="text-align:left;"><code>&quot;123&quot;</code></td><td style="text-align:left;"><code>123</code></td></tr><tr><td style="text-align:center;">bigint</td><td style="text-align:left;"><code>&quot;7809986417725377199277&quot;</code></td><td style="text-align:left;"><code>7809986417725377199277n</code></td></tr><tr><td style="text-align:center;">symbol</td><td style="text-align:left;"><code>&quot;Symbol(ABC)&quot;</code></td><td style="text-align:left;"><code>Symbol.for(&#39;ABC&#39;)</code></td></tr><tr><td style="text-align:center;">object</td><td style="text-align:left;"><code>&quot;{\\&quot;a\\&quot;:10}&quot;</code></td><td style="text-align:left;"><code>{ a: 10 }</code></td></tr><tr><td style="text-align:center;">string</td><td style="text-align:left;"><code>&quot;Hello World&quot;</code></td><td style="text-align:left;"><code>Hello World</code></td></tr></tbody></table>`,22),o=[n];function p(r,d,c,i,y,u){return s(),e("div",null,o)}const F=t(a,[["render",p]]);export{g as __pageData,F as default};
